/**
 * This class is generated by jOOQ
 */
package jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.Keys;
import jooq.Public;
import jooq.tables.records.BlacklistRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Blacklist extends TableImpl<BlacklistRecord> {

    private static final long serialVersionUID = 708293032;

    /**
     * The reference instance of <code>PUBLIC.BLACKLIST</code>
     */
    public static final Blacklist BLACKLIST = new Blacklist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlacklistRecord> getRecordType() {
        return BlacklistRecord.class;
    }

    /**
     * The column <code>PUBLIC.BLACKLIST.ID</code>.
     */
    public final TableField<BlacklistRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("(NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_9268120C_AB24_4044_8BEE_3367D4ABDEF1)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>PUBLIC.BLACKLIST.HOST</code>.
     */
    public final TableField<BlacklistRecord, String> HOST = createField("HOST", org.jooq.impl.SQLDataType.VARCHAR.length(256), this, "");

    /**
     * Create a <code>PUBLIC.BLACKLIST</code> table reference
     */
    public Blacklist() {
        this("BLACKLIST", null);
    }

    /**
     * Create an aliased <code>PUBLIC.BLACKLIST</code> table reference
     */
    public Blacklist(String alias) {
        this(alias, BLACKLIST);
    }

    private Blacklist(String alias, Table<BlacklistRecord> aliased) {
        this(alias, aliased, null);
    }

    private Blacklist(String alias, Table<BlacklistRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BlacklistRecord, Long> getIdentity() {
        return Keys.IDENTITY_BLACKLIST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BlacklistRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_F;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BlacklistRecord>> getKeys() {
        return Arrays.<UniqueKey<BlacklistRecord>>asList(Keys.CONSTRAINT_F);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Blacklist as(String alias) {
        return new Blacklist(alias, this);
    }

    /**
     * Rename this table
     */
    public Blacklist rename(String name) {
        return new Blacklist(name, null);
    }
}
